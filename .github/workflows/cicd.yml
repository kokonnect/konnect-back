name: konnect-backend CI/CD (simple)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-konnect-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Build
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar -x test

      - name: Find jar
        id: jar
        run: echo "path=$(ls -1 build/libs/*.jar | head -n 1)" >> $GITHUB_OUTPUT

      - name: Prepare SSH
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${PROD_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${PROD_SSH_PORT:-22} ${PROD_HOST} >> ~/.ssh/known_hosts

      # .env를 러너에서 만든 뒤 올린다 (YAML 에러 방지)
      - name: Create env file
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SPRING_PROFILES_ACTIVE: ${{ secrets.SPRING_PROFILES_ACTIVE }}
          PROD_SERVER_PORT: ${{ secrets.PROD_SERVER_PORT }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          printf "%s\n" \
            "SPRING_DATASOURCE_URL=${DB_URL}" \
            "SPRING_DATASOURCE_USERNAME=${DB_USERNAME}" \
            "SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}" \
            "SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}" \
            "SPRING_FLYWAY_ENABLED=true" \
            "SPRING_JPA_HIBERNATE_DDL_AUTO=none" \
            "SERVER_PORT=${PROD_SERVER_PORT:-8080}" \
            "REVISION=${GITHUB_SHA}" \
            > app.env

      - name: Upload jar & env
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
        run: |
          scp -P ${PROD_SSH_PORT:-22} -i ~/.ssh/id_rsa \
            "${{ steps.jar.outputs.path }}" \
            "${PROD_USER}@${PROD_HOST}:/tmp/konnect-backend.jar"
          scp -P ${PROD_SSH_PORT:-22} -i ~/.ssh/id_rsa \
            app.env \
            "${PROD_USER}@${PROD_HOST}:/tmp/konnect-backend.env"

      - name: Restart app (nohup)
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          PROD_APP_DIR: ${{ secrets.PROD_APP_DIR }}
        run: |
          ssh -p ${PROD_SSH_PORT:-22} -i ~/.ssh/id_rsa ${PROD_USER}@${PROD_HOST} bash -euo pipefail -c '
            APP_DIR="${PROD_APP_DIR:-$HOME/konnect-backend}"
            mkdir -p "$APP_DIR"

            # 파일 배치
            mv /tmp/konnect-backend.jar "$APP_DIR/app.jar"
            mv /tmp/konnect-backend.env "$APP_DIR/.env"
            chmod 600 "$APP_DIR/.env"

            # 이전 프로세스 강제 종료
            pgrep -fa "java.*$APP_DIR/app.jar" | awk "{print \$1}" | xargs -r kill || true
            sleep 2
            pgrep -fa "java.*$APP_DIR/app.jar" | awk "{print \$1}" | xargs -r kill -9 || true

            # 로그 초기화 후 실행
            : > "$APP_DIR/app.log"
            set -a; . "$APP_DIR/.env"; set +a
            nohup java -jar "$APP_DIR/app.jar" --server.address=0.0.0.0 > "$APP_DIR/app.log" 2>&1 &

            echo "Deployed $REVISION. Log: $APP_DIR/app.log"
          '
