on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Build application
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar -x test
      - name: Verify secrets
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.PROD_SSH_KEY }}" ]; then echo "❌ PROD_SSH_KEY is missing"; exit 1; fi
          if [ -z "${{ secrets.PROD_HOST }}" ]; then echo "❌ PROD_HOST is missing"; exit 1; fi
          if [ -z "${{ secrets.PROD_USER }}" ]; then echo "❌ PROD_USER is missing"; exit 1; fi
          if [ -z "${{ secrets.DB_URL }}" ]; then echo "❌ DB_URL is missing"; exit 1; fi
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then echo "❌ OPENAI_API_KEY is missing"; exit 1; fi
          echo "✅ All required secrets are present"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Upload JAR file
          scp build/libs/*.jar ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:~/app.jar
          
          # Deploy and restart
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            # Stop existing application
            sudo pkill -f "java.*app.jar" || true
            sleep 3
            
            # Start new application
            nohup java -jar ~/app.jar \
              --spring.datasource.url="${{ secrets.DB_URL }}" \
              --spring.datasource.username="${{ secrets.DB_USERNAME }}" \
              --spring.datasource.password="${{ secrets.DB_PASSWORD }}" \
              --server.port="${{ secrets.PROD_SERVER_PORT }}" \
              --jwt.secret="${{ secrets.JWT_SECRET }}" \
              --spring.ai.openai.api-key="${{ secrets.OPENAI_API_KEY }}" \
              > ~/app.log 2>&1 &
            
            # Wait and check if application started
            sleep 10
            if pgrep -f "java.*app.jar" > /dev/null; then
              echo "✅ Application started successfully"
              echo "📋 Check logs: tail -f ~/app.log"
            else
              echo "❌ Application failed to start"
              echo "📋 Last 50 lines of log:"
              tail -50 ~/app.log
              exit 1
            fi
          EOF
